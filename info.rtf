  Асоціативність - визначає порядок у якому виконуються оператори з одинаковим пріорітетом
    https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/Operator_precedence
  Конкатинація - дія оператора "склеювання" (типу '10'+10  === 1010)

  ** степінь 
  -5 ** 2 -- не спрацює
  (-5) ** 2 -- спрацює 
    бо у них права асоціативність (спробує спочатку вирішити 5**2 а потім додасть -)

  префіксний інкримент - збільшить одразу й передасть додане значення
    ++num;
  постфіксний інкримент - збільшить одразу, але передасть не додане значення ( на тому ж рядку)
    num++;
  така ж історія з декриментами num--; --num;

  якщо поставити +num то num буде переведено у число 
    Н:
    num='599';
    +num; 
    num = 599;

    але:
    +'asdsadsa' = NaN
    +'0xFA45BC' = 1640121 (бо це число шіснадцяткове (помітити можна по початку 0x...))
  така ж шука з -num але він робить число -, що є не дуже тим що потрібно

  !'test' = false

  !!''test'' = true - перетворення значення до була 

  'cat' > 'mouse' = false// посимвольно по попозиції в юнікоді

  ... 
  == - погано
  ===

  NaN - заразний

  NaN === NaN = false - єдина фігня що при порівнянні самого себе = false
  

  якщо робити x < y < z 
  потрібно робити (x < y) && (y < z)
  бо інакше це буде щось типу (10 < 150 < 100) = true 
    бо ((10<150)<100) === (true < 100) === (1 < 100)

  && - повертає першу брехню або останню правду
  10 && 50 = 50
  10 && NaN = NaN

  || - повертає першу правду або останню брехню
  10 || 50 = 10
  10 || NaN = 10
  null || NaN = NaN