
  Конкатинація - операція ("склеювання") зрошування (+ або array.concat())


(functions.txt)
  function expresion - функціональний вираз
    const functionOne = function () {...}

  function declaration - об'ява функції
    function functionTwo(){}

  arrow function - стрілкова функція 
    () => expression

(objects.txt)
  насправді усі об'єкти це посилання на комірку пам'яті, тому:
  return obj1 === obj1 //true
  return obj1 === obj2 // fasle
  тому що obj1, наприклад, буде посланням на клітинку 5000, але obj2 є наприклад посилання на 6500

  !!! Але якщо зробити: 
  const obj3 = obj1 =>
    return obj1 === obj3 // true
  !!! тому що тепер obj3 дорівнює посиланню на комірку 5000, як й obj1, тож якщо змінити obj1 або obj3 будуть змінені вони вдвох (бо зміни будуть записані у спільну комірку)

(construct.txt)
  альтернативи створення об'єктів
   let hamster1 = {};  //літеральний
   let hamster2 = Object(); // ?
   let hamster3 = new Object(); // конструктор


(array.txt)
  Масив це різновив об'єкту що заповнений однотипно


(array-2.txt)
  мутуючі та не мутуючі функції 

  //mutable
  мутуючі функції - функції що змінюють об'єкт (з якого беруть данні)
  
  //immutable
  не мутуючі функції - що не змінюють об'єкт з якого беруть данні


  callback функція - це функція що запускається іншою функцією


(prototype.txt)
  // console.log(video2.addViews === video3.addViews); //false
  // console.log(test1.pop === test2.pop); //true
  //тому що ці функції стовюються кожного разу нові для кожного нового відео

  Прототип - це спеціальний об'єкт у який потрібно класти усе що має бути однаковим для кожного з об'єкта що створюється

  __proto__ vs prototype
  __proto__ це прототип саме для об'єктів та функцій 
  prototype це визначення прототипу що конструктор надасть екземплярам

  //даємо прототип конструктору й він сам виставляє прототип екземплярам
  Video.prototype = vidoePrototype;
    
    
(CW-functions-v3-1.12.23.js && functions.txt-01.12.23)
  чисті функції = clear function
    детерміновані функції + функції без побічних еффектів
    функція що тільки викликає чисту функцію = чиста функція

  детерміновані функції = determined funct1
    функції що при однакових введених параметрах повертають однакові значення 

  функції з побічними ефектами = fucntions with side effects 
    виводити або читати, консоль ложити, кидати помилку, змінення переданого аргумента = побічні еффекти
    
  функції вищого порядку = HOF (High Order Fucntions)
   якщо функція приймає в аргументи іншу функцію або повертає функцію


(OOP)
  extends
  наслідування - наслідування методів та даних з батьківського елементу до дочірних 
  
  абстракція - виділення найважливіших частин реалізації
  
  #name
  інкапсуляция - приховання даних\методів для приховування складності реалізації

  інтерфейс - це те що допомогає двум (об'єктам) взаємодіяти


(Data structure)
  iterator - це поведінковий патерн проектування, що дає змогу послідовно обходити елементи складових об’єктів, не розкриваючи їхньої внутрішньої організації.


........
  плаваюча помилка - помилка то є то її немає 
  хард код - щось що наче цвяхами прибито до функції