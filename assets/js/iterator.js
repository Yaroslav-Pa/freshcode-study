// iterator (це поведінковий патерн проектування) штука, що дає змогу послідовно обходити елементи складових об’єктів 

//   iterables - об'єкти/дані у яких є ітератор
//     це: 
//      масив,
//      рядок,
//      Map, (не метод масиву!)
//      Set,
//      arguments
//      ...


const arr = [50,5,false];

//отримаємо екземпляр ітератору масиву
const iter = arr[Symbol.iterator]();
// це об'єкт з методом next що повертає об'єкт
// з двума властивостями
// done = чи закінчили обхід
// value = значення поточного ітератора

// *с кожним викликом 16 строки буде передавати наступне значення, якщо нічого не залишиться done = true. 
// **Повернути у початкове становише = неможливо?(/як тільки пройшов), потрібно створювати новий екземпляр ітератору масиву

/* 
  Використовується для:
  1) допомогає сперд оператору (...name)
  2) спець циклів
  3) допомагає з деструктурізацією 
*/

// 1)
const notArr = {
  's':'one',
  'd':'two',
  1:1221
}
console.log(...arr);
// console.log(...notArr); //error // не буде працювати бо у об'єкта немає ітератора


// 2)

// for ... in - ходить по властивостям об'єктів повертає їх ключі
for (const key in notArr) {
  console.log(key);//видасть усі ключи об'єкта, але пропустить Symbol`s
  // notArr[key].something
}


// for ... of - цикл на ітераторах
for (const elem of arr){
  console.log(elem)
  // перевага над forEach що ти можеш стати десь там, а не проходити увесь масив
  // більше до суперника for, for of є більш зрозумілим для саме такого варіанта, коли for більше функціональний
}